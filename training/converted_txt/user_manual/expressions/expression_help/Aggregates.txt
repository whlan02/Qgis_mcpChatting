




orphan:




aggregate
Returns an aggregate value calculated using features from another layer.






Syntax
aggregate(layer, aggregate, expression, [filter], [concatenator=''], [order_by])
[] marks optional arguments


Arguments

layer - a string, representing either a layer name or layer ID
aggregate - a string corresponding to the aggregate to calculate. Valid options are:
count
count_distinct
count_missing
minimum or min
maximum or max
sum
mean
median
stdev
stdevsample
range
minority
majority
q1: first quartile
q3: third quartile
iqr: inter quartile range
min_length: minimum string length
max_length: maximum string length
concatenate: join strings with a concatenator
concatenate_unique: join unique strings with a concatenator
collect: create an aggregated multipart geometry
array_agg: create an array of aggregated values


expression - sub expression or field name to aggregate
filter - optional filter expression to limit the features used for calculating the aggregate. Fields and geometry are from the features on the joined layer. The source feature can be accessed with the variable @parent.
concatenator - optional string to use to join values for 'concatenate' and 'concatenate_unique' aggregates
order_by - optional filter expression to order the features used for calculating the aggregate. Fields and geometry are from the features on the joined layer. By default, the features will be returned in an unspecified order.



Examples

aggregate(layer:='rail_stations',aggregate:='sum',expression:="passengers") → sum of all values from the passengers field in the rail_stations layer
aggregate('rail_stations','sum', "passengers"/7) → calculates a daily average of "passengers" by dividing the "passengers" field by 7 before summing the values
aggregate(layer:='rail_stations',aggregate:='sum',expression:="passengers",filter:="class">3) → sums up all values from the "passengers" field from features where the "class" attribute is greater than 3 only
aggregate(layer:='rail_stations',aggregate:='concatenate', expression:="name", concatenator:=',') → comma separated list of the name field for all features in the rail_stations layer
aggregate(layer:='countries', aggregate:='max', expression:="code", filter:=intersects( @geometry, geometry(@parent) ) ) → The country code of an intersecting country on the layer 'countries'
aggregate(layer:='rail_stations',aggregate:='sum',expression:="passengers",filter:=contains( @atlas_geometry, @geometry ) ) → sum of all values from the passengers field in the rail_stations within the current atlas feature
aggregate(layer:='rail_stations', aggregate:='collect', expression:=centroid(@geometry), filter:="region_name" = attribute(@parent,'name') ) → aggregates centroid geometries of the rail_stations of the same region as current feature







array_agg
Returns an array of aggregated values from a field or expression.






Syntax
array_agg(expression, [group_by], [filter], [order_by])
[] marks optional arguments


Arguments

expression - sub expression of field to aggregate
group_by - optional expression to use to group aggregate calculations
filter - optional expression to use to filter features used to calculate aggregate
order_by - optional expression to use to order features used to calculate aggregate. By default, the features will be returned in an unspecified order.



Examples

array_agg("name",group_by:="state") → list of name values, grouped by state field







collect
Returns the multipart geometry of aggregated geometries from an expression






Syntax
collect(expression, [group_by], [filter])
[] marks optional arguments


Arguments

expression - geometry expression to aggregate
group_by - optional expression to use to group aggregate calculations
filter - optional expression to use to filter features used to calculate aggregate



Examples

collect( @geometry ) → multipart geometry of aggregated geometries
collect( centroid(@geometry), group_by:="region", filter:= "use" = 'civilian' ) → aggregated centroids of the civilian features based on their region value







concatenate
Returns all aggregated strings from a field or expression joined by a delimiter.






Syntax
concatenate(expression, [group_by], [filter], [concatenator], [order_by])
[] marks optional arguments


Arguments

expression - sub expression of field to aggregate
group_by - optional expression to use to group aggregate calculations
filter - optional expression to use to filter features used to calculate aggregate
concatenator - optional string to use to join values. Empty by default.
order_by - optional expression to use to order features used to calculate aggregate. By default, the features will be returned in an unspecified order.



Examples

concatenate("town_name",group_by:="state",concatenator:=',') → comma separated list of town_names, grouped by state field







concatenate_unique
Returns all unique strings from a field or expression joined by a delimiter.






Syntax
concatenate_unique(expression, [group_by], [filter], [concatenator], [order_by])
[] marks optional arguments


Arguments

expression - sub expression of field to aggregate
group_by - optional expression to use to group aggregate calculations
filter - optional expression to use to filter features used to calculate aggregate
concatenator - optional string to use to join values. Empty by default.
order_by - optional expression to use to order features used to calculate aggregate. By default, the features will be returned in an unspecified order.



Examples

concatenate_unique("town_name",group_by:="state",concatenator:=',') → comma separated list of unique town_names, grouped by state field







count
Returns the count of matching features.






Syntax
count(expression, [group_by], [filter])
[] marks optional arguments


Arguments

expression - sub expression of field to aggregate
group_by - optional expression to use to group aggregate calculations
filter - optional expression to use to filter features used to calculate aggregate



Examples

count("stations",group_by:="state") → count of stations, grouped by state field







count_distinct
Returns the count of distinct values.






Syntax
count_distinct(expression, [group_by], [filter])
[] marks optional arguments


Arguments

expression - sub expression of field to aggregate
group_by - optional expression to use to group aggregate calculations
filter - optional expression to use to filter features used to calculate aggregate



Examples

count_distinct("stations",group_by:="state") → count of distinct stations values, grouped by state field







count_missing
Returns the count of missing (NULL) values.






Syntax
count_missing(expression, [group_by], [filter])
[] marks optional arguments


Arguments

expression - sub expression of field to aggregate
group_by - optional expression to use to group aggregate calculations
filter - optional expression to use to filter features used to calculate aggregate



Examples

count_missing("stations",group_by:="state") → count of missing (NULL) station values, grouped by state field







iqr
Returns the calculated inter quartile range from a field or expression.






Syntax
iqr(expression, [group_by], [filter])
[] marks optional arguments


Arguments

expression - sub expression of field to aggregate
group_by - optional expression to use to group aggregate calculations
filter - optional expression to use to filter features used to calculate aggregate



Examples

iqr("population",group_by:="state") → inter quartile range of population value, grouped by state field







majority
Returns the aggregate majority of values (most commonly occurring value) from a field or expression.






Syntax
majority(expression, [group_by], [filter])
[] marks optional arguments


Arguments

expression - sub expression of field to aggregate
group_by - optional expression to use to group aggregate calculations
filter - optional expression to use to filter features used to calculate aggregate



Examples

majority("class",group_by:="state") → most commonly occurring class value, grouped by state field







max_length
Returns the maximum length of strings from a field or expression.






Syntax
max_length(expression, [group_by], [filter])
[] marks optional arguments


Arguments

expression - sub expression of field to aggregate
group_by - optional expression to use to group aggregate calculations
filter - optional expression to use to filter features used to calculate aggregate



Examples

max_length("town_name",group_by:="state") → maximum length of town_name, grouped by state field







maximum
Returns the aggregate maximum value from a field or expression.






Syntax
maximum(expression, [group_by], [filter])
[] marks optional arguments


Arguments

expression - sub expression of field to aggregate
group_by - optional expression to use to group aggregate calculations
filter - optional expression to use to filter features used to calculate aggregate



Examples

maximum("population",group_by:="state") → maximum population value, grouped by state field







mean
Returns the aggregate mean value from a field or expression.






Syntax
mean(expression, [group_by], [filter])
[] marks optional arguments


Arguments

expression - sub expression of field to aggregate
group_by - optional expression to use to group aggregate calculations
filter - optional expression to use to filter features used to calculate aggregate



Examples

mean("population",group_by:="state") → mean population value, grouped by state field







median
Returns the aggregate median value from a field or expression.






Syntax
median(expression, [group_by], [filter])
[] marks optional arguments


Arguments

expression - sub expression of field to aggregate
group_by - optional expression to use to group aggregate calculations
filter - optional expression to use to filter features used to calculate aggregate



Examples

median("population",group_by:="state") → median population value, grouped by state field







min_length
Returns the minimum length of strings from a field or expression.






Syntax
min_length(expression, [group_by], [filter])
[] marks optional arguments


Arguments

expression - sub expression of field to aggregate
group_by - optional expression to use to group aggregate calculations
filter - optional expression to use to filter features used to calculate aggregate



Examples

min_length("town_name",group_by:="state") → minimum length of town_name, grouped by state field







minimum
Returns the aggregate minimum value from a field or expression.






Syntax
minimum(expression, [group_by], [filter])
[] marks optional arguments


Arguments

expression - sub expression of field to aggregate
group_by - optional expression to use to group aggregate calculations
filter - optional expression to use to filter features used to calculate aggregate



Examples

minimum("population",group_by:="state") → minimum population value, grouped by state field







minority
Returns the aggregate minority of values (least occurring value) from a field or expression.






Syntax
minority(expression, [group_by], [filter])
[] marks optional arguments


Arguments

expression - sub expression of field to aggregate
group_by - optional expression to use to group aggregate calculations
filter - optional expression to use to filter features used to calculate aggregate



Examples

minority("class",group_by:="state") → least occurring class value, grouped by state field







q1
Returns the calculated first quartile from a field or expression.






Syntax
q1(expression, [group_by], [filter])
[] marks optional arguments


Arguments

expression - sub expression of field to aggregate
group_by - optional expression to use to group aggregate calculations
filter - optional expression to use to filter features used to calculate aggregate



Examples

q1("population",group_by:="state") → first quartile of population value, grouped by state field







q3
Returns the calculated third quartile from a field or expression.






Syntax
q3(expression, [group_by], [filter])
[] marks optional arguments


Arguments

expression - sub expression of field to aggregate
group_by - optional expression to use to group aggregate calculations
filter - optional expression to use to filter features used to calculate aggregate



Examples

q3("population",group_by:="state") → third quartile of population value, grouped by state field







range
Returns the aggregate range of values (maximum - minimum) from a field or expression.






Syntax
range(expression, [group_by], [filter])
[] marks optional arguments


Arguments

expression - sub expression of field to aggregate
group_by - optional expression to use to group aggregate calculations
filter - optional expression to use to filter features used to calculate aggregate



Examples

range("population",group_by:="state") → range of population values, grouped by state field







relation_aggregate
Returns an aggregate value calculated using all matching child features from a layer relation.






Syntax
relation_aggregate(relation, aggregate, expression, [concatenator=''], [order_by])
[] marks optional arguments


Arguments

relation - a string, representing a relation ID
aggregate - a string corresponding to the aggregate to calculate. Valid options are:
count
count_distinct
count_missing
minimum or min
maximum or max
sum
mean
median
stdev
stdevsample
range
minority
majority
q1: first quartile
q3: third quartile
iqr: inter quartile range
min_length: minimum string length
max_length: maximum string length
concatenate: join strings with a concatenator
concatenate_unique: join unique strings with a concatenator
collect: create an aggregated multipart geometry
array_agg: create an array of aggregated values


expression - sub expression or field name to aggregate
concatenator - optional string to use to join values for 'concatenate' aggregate
order_by - optional expression to order the features used for calculating the aggregate. Fields and geometry are from the features on the joined layer. By default, the features will be returned in an unspecified order.



Examples

relation_aggregate(relation:='my_relation',aggregate:='mean',expression:="passengers") → mean value of all matching child features using the 'my_relation' relation
relation_aggregate('my_relation','sum', "passengers"/7) → sum of the passengers field divided by 7 for all matching child features using the 'my_relation' relation
relation_aggregate('my_relation','concatenate', "towns", concatenator:=',') → comma separated list of the towns field for all matching child features using the 'my_relation' relation
relation_aggregate('my_relation','array_agg', "id") → array of the id field from all matching child features using the 'my_relation' relation







stdev
Returns the aggregate standard deviation value from a field or expression.






Syntax
stdev(expression, [group_by], [filter])
[] marks optional arguments


Arguments

expression - sub expression of field to aggregate
group_by - optional expression to use to group aggregate calculations
filter - optional expression to use to filter features used to calculate aggregate



Examples

stdev("population",group_by:="state") → standard deviation of population value, grouped by state field







sum
Returns the aggregate summed value from a field or expression.






Syntax
sum(expression, [group_by], [filter])
[] marks optional arguments


Arguments

expression - sub expression of field to aggregate
group_by - optional expression to use to group aggregate calculations
filter - optional expression to use to filter features used to calculate aggregate



Examples

sum("population",group_by:="state") → summed population value, grouped by state field







