




orphan:




array
Returns an array containing all the values passed as parameter.






Syntax
array(value1, value2, ...)

Arguments

value - a value



Examples

array(2,10) → [ 2, 10 ]
array(2,10)[0] → 2







array_all
Returns TRUE if an array contains all the values of a given array.






Syntax
array_all(array_a, array_b)

Arguments

array_a - an array
array_b - the array of values to search



Examples

array_all(array(1,2,3),array(2,3)) → TRUE
array_all(array(1,2,3),array(1,2,4)) → FALSE







array_append
Returns an array with the given value added at the end.






Syntax
array_append(array, value)

Arguments

array - an array
value - the value to add



Examples

array_append(array(1,2,3),4) → [ 1, 2, 3, 4 ]







array_cat
Returns an array containing all the given arrays concatenated.






Syntax
array_cat(array1, array2, ...)

Arguments

array - an array



Examples

array_cat(array(1,2),array(2,3)) → [ 1, 2, 2, 3 ]







array_contains
Returns TRUE if an array contains the given value.






Syntax
array_contains(array, value)

Arguments

array - an array
value - the value to search



Examples

array_contains(array(1,2,3),2) → TRUE







array_count
Counts the number of occurrences of a given value in an array.






Syntax
array_count(array, value)

Arguments

array - an array
value - the value to count



Examples

array_count(array('a', 'b', 'c', 'b'), 'b') → 2







array_distinct
Returns an array containing distinct values of the given array.






Syntax
array_distinct(array)

Arguments

array - an array



Examples

array_distinct(array(1,2,3,2,1)) → [ 1, 2, 3 ]







array_filter
Returns an array with only the items for which the expression evaluates to true.






Syntax
array_filter(array, expression, [limit=0])
[] marks optional arguments


Arguments

array - an array
expression - an expression to evaluate on each item. The variable @element will be replaced by the current value.
limit - maximum number of elements to be returned. Use 0 to return all values.



Examples

array_filter(array(1,2,3),@element < 3) → [ 1, 2 ]
array_filter(array(1,2,3),@element < 3, 1) → [ 1 ]







array_find
Returns the lowest index (0 for the first one) of a value within an array. Returns -1 if the value is not found.






Syntax
array_find(array, value)

Arguments

array - an array
value - the value to search



Examples

array_find(array('a', 'b', 'c'), 'b') → 1
array_find(array('a', 'b', 'c', 'b'), 'b') → 1







array_first
Returns the first value of an array.






Syntax
array_first(array)

Arguments

array - an array



Examples

array_first(array('a','b','c')) → 'a'







array_foreach
Returns an array with the given expression evaluated on each item.






Syntax
array_foreach(array, expression)

Arguments

array - an array
expression - an expression to evaluate on each item. The variable @element will be replaced by the current value and the variable @counter by the current index (starting with 0).



Examples

array_foreach(array('a','b','c'),upper(@element)) → [ 'A', 'B', 'C' ]
array_foreach(array(1,2,3),@element + 10) → [ 11, 12, 13 ]
array_foreach(array(1,2,3),@element + @counter) → [ 1, 3, 5 ]







array_get
Returns the Nth value (0 for the first one) or the last -Nth value (-1 for the last one) of an array.






Syntax
array_get(array, pos)

Arguments

array - an array
pos - the index to get (0 based)



Examples

array_get(array('a','b','c'),1) → 'b'
array_get(array('a','b','c'),-1) → 'c'







array_insert
Returns an array with the given value added at the given position.






Syntax
array_insert(array, pos, value)

Arguments

array - an array
pos - the position where to add (0 based)
value - the value to add



Examples

array_insert(array(1,2,3),1,100) → [ 1, 100, 2, 3 ]







array_intersect
Returns TRUE if at least one element of array1 exists in array2.






Syntax
array_intersect(array1, array2)

Arguments

array1 - an array
array2 - another array



Examples

array_intersect(array(1,2,3,4),array(4,0,2,5)) → TRUE







array_last
Returns the last value of an array.






Syntax
array_last(array)

Arguments

array - an array



Examples

array_last(array('a','b','c')) → 'c'







array_length
Returns the number of elements of an array.






Syntax
array_length(array)

Arguments

array - an array



Examples

array_length(array(1,2,3)) → 3







array_majority
Returns the most common values in an array.






Syntax
array_majority(array, [option='all'])
[] marks optional arguments


Arguments

array - an array
option='all' - a string specifying the return values handling. Valid options are:
all: Default, all most common values are returned in an array.
any: Returns one of the most common values.
median: Returns the median of the most common values. Non arithmetic values are ignored.
real_majority: Returns the value which occurs more than half the size of the array.





Examples

array_majority(array(0,1,42,42,43), 'all') → [ 42 ]
array_majority(array(0,1,42,42,43,1), 'all') → [ 42, 1 ]
array_majority(array(0,1,42,42,43,1), 'any') → 1 or 42
array_majority(array(0,1,1,2,2), 'median') → 1.5
array_majority(array(0,1,42,42,43), 'real_majority') → NULL
array_majority(array(0,1,42,42,43,42), 'real_majority') → NULL
array_majority(array(0,1,42,42,43,42,42), 'real_majority') → 42







array_max
Returns the maximum value of an array.






Syntax
array_max(array)

Arguments

array - an array



Examples

array_max(array(0,42,4,2)) → 42







array_mean
Returns the mean of arithmetic values in an array. Non numeric values in the array are ignored.






Syntax
array_mean(array)

Arguments

array - an array



Examples

array_mean(array(0,1,7,66.6,135.4)) → 42
array_mean(array(0,84,'a','b','c')) → 42







array_median
Returns the median of arithmetic values in an array. Non arithmetic values in the array are ignored.






Syntax
array_median(array)

Arguments

array - an array



Examples

array_median(array(0,1,42,42,43)) → 42
array_median(array(0,1,2,42,'a','b')) → 1.5







array_min
Returns the minimum value of an array.






Syntax
array_min(array)

Arguments

array - an array



Examples

array_min(array(43,42,54)) → 42







array_minority
Returns the less common values in an array.






Syntax
array_minority(array, [option='all'])
[] marks optional arguments


Arguments

array - an array
option='all' - a string specifying the return values handling. Valid options are:
all: Default, all less common values are returned in an array.
any: Returns one of the less common values.
median: Returns the median of the less common values. Non arithmetic values are ignored.
real_minority: Returns values which occur less than half the size of the array.





Examples

array_minority(array(0,42,42), 'all') → [ 0 ]
array_minority(array(0,1,42,42), 'all') → [ 0, 1 ]
array_minority(array(0,1,42,42,43,1), 'any') → 0 or 43
array_minority(array(1,2,3,3), 'median') → 1.5
array_minority(array(0,1,42,42,43), 'real_minority') → [ 42, 43, 0, 1 ]
array_minority(array(0,1,42,42,43,42), 'real_minority') → [ 42, 43, 0, 1 ]
array_minority(array(0,1,42,42,43,42,42), 'real_minority') → [ 43, 0, 1 ]







array_prepend
Returns an array with the given value added at the beginning.






Syntax
array_prepend(array, value)

Arguments

array - an array
value - the value to add



Examples

array_prepend(array(1,2,3),0) → [ 0, 1, 2, 3 ]







array_prioritize
Returns an array sorted using the ordering specified in another array. Values which are present in the first array but are missing from the second array will be added to the end of the result.






Syntax
array_prioritize(array, array_prioritize)

Arguments

array - an array
array_prioritize - an array with values ordered by priority



Examples

array_prioritize(array(1, 8, 2, 5), array(5, 4, 2, 1, 3, 8)) → [ 5, 2, 1, 8 ]
array_prioritize(array(5, 4, 2, 1, 3, 8), array(1, 8, 6, 5)) → [ 1, 8, 5, 4, 2, 3 ]







array_remove_all
Returns an array with all the entries of the given value removed.






Syntax
array_remove_all(array, value)

Arguments

array - an array
value - the values to remove



Examples

array_remove_all(array('a','b','c','b'),'b') → [ 'a', 'c' ]







array_remove_at
Returns an array with the item at the given index removed. Supports positive (0 for the first element) and negative (the last -Nth value, -1 for the last element) index.






Syntax
array_remove_at(array, pos)

Arguments

array - an array
pos - the position to remove (0 based)



Examples

array_remove_at(array(1, 2, 3), 1) → [1, 3 ]
array_remove_at(array(1, 2, 3), -1) → [1, 2 ]







array_replace
Returns an array with the supplied value, array, or map of values replaced.
Value & array variant
Returns an array with the supplied value or array of values replaced by another value or an array of values.






Syntax
array_replace(array, before, after)

Arguments

array - the input array
before - the value or array of values to replace
after - the value or array of values to use as a replacement



Examples

array_replace(array('QGIS','SHOULD','ROCK'),'SHOULD','DOES') → [ 'QGIS', 'DOES', 'ROCK' ]
array_replace(array(3,2,1),array(1,2,3),array(7,8,9)) → [ 9, 8, 7 ]
array_replace(array('Q','G','I','S'),array('Q','S'),'-') → [ '-', 'G', 'I', '-' ]





Map variant
Returns an array with the supplied map keys replaced by their paired values.






Syntax
array_replace(array, map)

Arguments

array - the input array
map - the map containing keys and values



Examples

array_replace(array('APP', 'SHOULD', 'ROCK'),map('APP','QGIS','SHOULD','DOES')) → [ 'QGIS', 'DOES', 'ROCK' ]







array_reverse
Returns the given array with array values in reversed order.






Syntax
array_reverse(array)

Arguments

array - an array



Examples

array_reverse(array(2,4,0,10)) → [ 10, 0, 4, 2 ]







array_slice
Returns a portion of the array. The slice is defined by the start_pos and end_pos arguments.






Syntax
array_slice(array, start_pos, end_pos)

Arguments

array - an array
start_pos - the index of the start position of the slice (0 based). The start_pos index is included in the slice. If you use a negative start_pos, the index is counted from the end of the list (-1 based).
end_pos - the index of the end position of the slice (0 based). The end_pos index is included in the slice. If you use a negative end_pos, the index is counted from the end of the list (-1 based).



Examples

array_slice(array(1,2,3,4,5),0,3) → [ 1, 2, 3, 4 ]
array_slice(array(1,2,3,4,5),0,-1) → [ 1, 2, 3, 4, 5 ]
array_slice(array(1,2,3,4,5),-5,-1) → [ 1, 2, 3, 4, 5 ]
array_slice(array(1,2,3,4,5),0,0) → [ 1 ]
array_slice(array(1,2,3,4,5),-2,-1) → [ 4, 5 ]
array_slice(array(1,2,3,4,5),-1,-1) → [ 5 ]
array_slice(array('Dufour','Valmiera','Chugiak','Brighton'),1,2) → [ 'Valmiera', 'Chugiak' ]
array_slice(array('Dufour','Valmiera','Chugiak','Brighton'),-2,-1) → [ 'Chugiak', 'Brighton' ]







array_sort
Returns the provided array with its elements sorted.






Syntax
array_sort(array, [ascending=true])
[] marks optional arguments


Arguments

array - an array
ascending - set this parameter to false to sort the array in descending order



Examples

array_sort(array(3,2,1)) → [ 1, 2, 3 ]







array_sum
Returns the sum of arithmetic values in an array. Non numeric values in the array are ignored.






Syntax
array_sum(array)

Arguments

array - an array



Examples

array_sum(array(0,1,39.4,1.6,'a')) → 42.0







array_to_string
Concatenates array elements into a string separated by a delimiter and using optional string for empty values.






Syntax
array_to_string(array, [delimiter=','], [empty_value=''])
[] marks optional arguments


Arguments

array - the input array
delimiter - the string delimiter used to separate concatenated array elements
empty_value - the optional string to use as replacement for empty (zero length) matches



Examples

array_to_string(array('1','2','3')) → '1,2,3'
array_to_string(array(1,2,3),'-') → '1-2-3'
array_to_string(array('1','','3'),',','0') → '1,0,3'







generate_series
Creates an array containing a sequence of numbers.






Syntax
generate_series(start, stop, [step=1])
[] marks optional arguments


Arguments

start - first value of the sequence
stop - value that ends the sequence once reached
step - value used as the increment between values



Examples

generate_series(1,5) → [ 1, 2, 3, 4, 5 ]
generate_series(5,1,-1) → [ 5, 4, 3, 2, 1 ]







geometries_to_array
Splits a geometry into simpler geometries in an array.






Syntax
geometries_to_array(geometry)

Arguments

geometry - the input geometry



Examples

geometries_to_array(geom_from_wkt('MultiPoint (1 2, 5 21)')) → An array containing 'Point (1 2)' and 'Point (5 21)'
geometries_to_array(geom_from_wkt('GeometryCollection (Polygon ((5 8, 4 1, 3 2, 5 8)),LineString (3 2, 4 2))')) → an array of a polygon and a line geometries
geom_to_wkt(geometries_to_array(geom_from_wkt('GeometryCollection (Polygon ((5 8, 4 1, 3 2, 5 8)),LineString (3 2, 4 2))'))[0]) → 'Polygon ((5 8, 4 1, 3 2, 5 8))'
geometries_to_array(geom_from_wkt('MULTIPOLYGON(((5 5,0 0,0 10,5 5)),((5 5,10 10,10 0,5 5))')) → an array of two polygon geometries







regexp_matches
Returns an array of all strings captured by capturing groups, in the order the groups themselves appear in the supplied regular expression against a string.






Syntax
regexp_matches(string, regex, [empty_value=''])
[] marks optional arguments


Arguments

string - the string to capture groups from against the regular expression
regex - the regular expression used to capture groups
empty_value - the optional string to use as replacement for empty (zero length) matches



Examples

regexp_matches('QGIS=>rocks','(.*)=>(.*)') → [ 'QGIS', 'rocks' ]
regexp_matches('key=>','(.*)=>(.*)','empty value') → [ 'key', 'empty value' ]







string_to_array
Splits string into an array using supplied delimiter and optional string for empty values.






Syntax
string_to_array(string, [delimiter=','], [empty_value=''])
[] marks optional arguments


Arguments

string - the input string
delimiter - the string delimiter used to split the input string
empty_value - the optional string to use as replacement for empty (zero length) matches



Examples

string_to_array('1,2,3',',') → [ '1', '2', '3' ]
string_to_array('1,,3',',','0') → [ '1', '0', '3' ]







