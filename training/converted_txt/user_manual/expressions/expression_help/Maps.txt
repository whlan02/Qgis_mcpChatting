




orphan:




from_json
Loads a JSON formatted string.






Syntax
from_json(string)

Arguments

string - JSON string



Examples

from_json('{"1":"one","2":"two"}') → { '1': 'one', '2': 'two' }
from_json('[1,2,3]') → [1,2,3]







hstore_to_map
Creates a map from a hstore-formatted string.






Syntax
hstore_to_map(string)

Arguments

string - the input string



Examples

hstore_to_map('qgis=>rocks') → { 'qgis': 'rocks' }







map
Returns a map containing all the keys and values passed as pair of parameters.






Syntax
map(key1, value1, key2, value2, ...)

Arguments

key - a key (string)
value - a value



Examples

map('1','one','2', 'two') → { '1': 'one', '2': 'two' }
map('1','one','2', 'two')['1'] → 'one'







map_akeys
Returns all the keys of a map as an array.






Syntax
map_akeys(map)

Arguments

map - a map



Examples

map_akeys(map('1','one','2','two')) → [ '1', '2' ]







map_avals
Returns all the values of a map as an array.






Syntax
map_avals(map)

Arguments

map - a map



Examples

map_avals(map('1','one','2','two')) → [ 'one', 'two' ]







map_concat
Returns a map containing all the entries of the given maps. If two maps contain the same key, the value of the second map is taken.






Syntax
map_concat(map1, map2, ...)

Arguments

map - a map



Examples

map_concat(map('1','one', '2','overridden'),map('2','two', '3','three')) → { '1': 'one', '2': 'two', '3': 'three' }







map_delete
Returns a map with the given key and its corresponding value deleted.






Syntax
map_delete(map, key)

Arguments

map - a map
key - the key to delete



Examples

map_delete(map('1','one','2','two'),'2') → { '1': 'one' }







map_exist
Returns TRUE if the given key exists in the map.






Syntax
map_exist(map, key)

Arguments

map - a map
key - the key to lookup



Examples

map_exist(map('1','one','2','two'),'3') → FALSE







map_get
Returns the value of a map, given its key. Returns NULL if the key does not exist.






Syntax
map_get(map, key)

Arguments

map - a map
key - the key to lookup



Examples

map_get(map('1','one','2','two'),'2') → 'two'
map_get( item_variables('Map 0'), 'map_scale') → scale of the item 'Map 0' (if it exists) in the current print layout







map_insert
Returns a map with an added key/value. If the key already exists, its value is overridden.






Syntax
map_insert(map, key, value)

Arguments

map - a map
key - the key to add
value - the value to add



Examples

map_insert(map('1','one'),'3','three') → { '1': 'one', '3': 'three' }
map_insert(map('1','one','2','overridden'),'2','two') → { '1': 'one', '2': 'two' }







map_prefix_keys
Returns a map with all keys prefixed by a given string.






Syntax
map_prefix_keys(map, prefix)

Arguments

map - a map
prefix - a string



Examples

map_prefix_keys(map('1','one','2','two'), 'prefix-') → { 'prefix-1': 'one', 'prefix-2': 'two' }







map_to_hstore
Merge map elements into a hstore-formatted string.






Syntax
map_to_hstore(map)

Arguments

map - the input map



Examples

map_to_hstore(map('1','one','2','two')) → '"1"=>"one"','"2"=>"two"'







map_to_html_dl
Merge map elements into a HTML definition list string.






Syntax
map_to_html_dl(map)

Arguments

map - the input map



Examples

map_to_html_dl(map('1','one','2','two')) → <dl><dt>1</dt><dd>one</dd><dt>2</dt><dd>two</dd></dl>







map_to_html_table
Merge map elements into a HTML table string.






Syntax
map_to_html_table(map)

Arguments

map - the input map



Examples

map_to_html_table(map('1','one','2','two')) → <table><thead><tr><th>1</th><th>2</th></tr></thead><tbody><tr><td>one</td><td>two</td></tr></tbody></table>







to_json
Create a JSON formatted string from a map, array or other value.






Syntax
to_json(value)

Arguments

value - The input value



Examples

to_json(map('1','one','2','two')) → {"1":"one","2":"two"}
to_json(array(1,2,3)) → [1,2,3]







url_encode
Returns an URL encoded string from a map. Transforms all characters in their properly-encoded form producing a fully-compliant query string.
Note that the plus sign '+' is not converted.






Syntax
url_encode(map)

Arguments

map - a map.



Examples

url_encode(map('a&+b', 'a and plus b', 'a=b', 'a equals b')) → 'a%26+b=a%20and%20plus%20b&a%3Db=a%20equals%20b'







