




orphan:




attribute
Returns an attribute from a feature.
Variant 1
Returns the value of an attribute from the current feature.






Syntax
attribute(attribute_name)

Arguments

attribute_name - name of attribute to be returned



Examples

attribute( 'name' ) → value stored in 'name' attribute for the current feature





Variant 2
Allows the target feature and attribute name to be specified.






Syntax
attribute(feature, attribute_name)

Arguments

feature - a feature
attribute_name - name of attribute to be returned



Examples

attribute( @atlas_feature, 'name' ) → value stored in 'name' attribute for the current atlas feature







attributes
Returns a map containing all attributes from a feature, with field names as map keys.
Variant 1
Returns a map of all attributes from the current feature.






Syntax
attributes()

Examples

attributes()['name'] → value stored in 'name' attribute for the current feature





Variant 2
Allows the target feature to be specified.






Syntax
attributes(feature)

Arguments

feature - a feature



Examples

attributes( @atlas_feature )['name'] → value stored in 'name' attribute for the current atlas feature







$currentfeature
Returns the current feature being evaluated. This can be used with the 'attribute' function to evaluate attribute values from the current feature. WARNING: This function is deprecated. It is recommended to use the replacement @feature variable instead.






Syntax
$currentfeature

Examples

attribute( $currentfeature, 'name' ) → value stored in 'name' attribute for the current feature







display_expression
Returns the display expression for a given feature in a layer. The expression is evaluated by default. Can be used with zero, one or more arguments, see below for details.
No parameters
If called with no parameters, the function will evaluate the display expression of the current feature in the current layer.






Syntax
display_expression()

Examples

display_expression() → The display expression of the current feature in the current layer.





One 'feature' parameter
If called with a 'feature' parameter only, the function will evaluate the specified feature from the current layer.






Syntax
display_expression(feature)

Arguments

feature - The feature which should be evaluated.



Examples

display_expression(@atlas_feature) → The display expression of the current atlas feature.





Layer and feature parameters
If the function is called with both a layer and a feature, it will evaluate the specified feature from the specified layer.






Syntax
display_expression(layer, feature, [evaluate=true])
[] marks optional arguments


Arguments

layer - The layer (or its ID or name)
feature - The feature which should be evaluated.
evaluate - If the expression must be evaluated. If false, the expression will be returned as a string literal only (which could potentially be later evaluated using the 'eval' function).



Examples

display_expression( 'streets', get_feature_by_id('streets', 1)) → The display expression of the feature with the ID 1 on the layer 'streets'.
display_expression('a_layer_id', @feature, 'False') → The display expression of the given feature not evaluated.







feature_id
Returns a feature's unique ID, or NULL if the feature is not valid.






Syntax
feature_id(feature)

Arguments

feature - a feature object



Examples

feature_id( @feature ) → the ID of the current feature







get_feature
Returns the first feature of a layer matching a given attribute value.
Single value variant
Along with the layer ID, a single column and value are specified.






Syntax
get_feature(layer, attribute, value)

Arguments

layer - layer name or ID
attribute - attribute name to use for the match
value - attribute value to match



Examples

get_feature('streets','name','main st') → first feature found in "streets" layer with "main st" value in the "name" field





Map variant
Along with the layer ID, a map containing the columns (key) and their respective value to be used.






Syntax
get_feature(layer, attribute)

Arguments

layer - layer name or ID
attribute - Map containing the column and value pairs to use



Examples

get_feature('streets',map('name','main st','lane_num','4')) → first feature found in "streets" layer with "main st" value in the "name" field and  "4" value in the "lane_num" field







get_feature_by_id
Returns the feature with an id on a layer.






Syntax
get_feature_by_id(layer, feature_id)

Arguments

layer - layer, layer name or layer id
feature_id - the id of the feature which should be returned



Examples

get_feature_by_id('streets', 1) → the feature with the id 1 on the layer "streets"







$id
Returns the feature id of the current row. WARNING: This function is deprecated. It is recommended to use the replacement @id variable instead.






Syntax
$id

Examples

$id → 42







is_attribute_valid
Returns TRUE if a specific feature attribute meets all constraints.






Syntax
is_attribute_valid(attribute, [feature], [layer], [strength])
[] marks optional arguments


Arguments

attribute - an attribute name
feature - A feature. If not set, the current feature will be used.
layer - A vector layer. If not set, the current layer will be used.
strength - Set to 'hard' or 'soft' to narrow down to a specific constraint type. If not set, the function will return FALSE if either a hard or a soft constraint fails.



Examples

is_attribute_valid('HECTARES') → TRUE if the current feature's value in the "HECTARES" field meets all constraints.
is_attribute_valid('HOUSES',get_feature('my_layer', 'FID', 10), 'my_layer') → FALSE if the value in the "HOUSES" field from the feature with "FID"=10 in 'my_layer' fails to meet all constraints.







is_feature_valid
Returns TRUE if a feature meets all field constraints.






Syntax
is_feature_valid([feature], [layer], [strength])
[] marks optional arguments


Arguments

feature - A feature. If not set, the current feature will be used.
layer - A vector layer. If not set, the current layer will be used.
strength - Set to 'hard' or 'soft' to narrow down to a specific constraint type. If not set, the function will return FALSE if either a hard or a soft constraint fails.



Examples

is_feature_valid(strength:='hard') → TRUE if all fields from the current feature meet their hard constraints.
is_feature_valid(get_feature('my_layer', 'FID', 10), 'my_layer') → FALSE if all fields from feature with "FID"=10 in 'my_layer' fails to meet all constraints.







is_selected
Returns TRUE if a feature is selected. Can be used with zero, one or two arguments, see below for details.
No parameters
If called with no parameters, the function will return TRUE if the current feature in the current layer is selected.






Syntax
is_selected()

Examples

is_selected() → TRUE if the current feature in the current layer is selected.





One 'feature' parameter
If called with a 'feature' parameter only, the function returns TRUE if the specified feature from the current layer is selected.






Syntax
is_selected(feature)

Arguments

feature - The feature which should be checked for selection.



Examples

is_selected(@atlas_feature) → TRUE if the current atlas feature is selected.
is_selected(get_feature('streets', 'name', 'Main St.')) → TRUE if the unique named "Main St." feature on the active "streets" layer is selected.
is_selected(get_feature_by_id('streets', 1)) → TRUE if the feature with the id 1 on the active "streets" layer is selected.





Two parameters
If the function is called with both a layer and a feature, it will return TRUE if the specified feature from the specified layer is selected.






Syntax
is_selected(layer, feature)

Arguments

layer - The layer (its ID or name) on which the selection will be checked.
feature - The feature which should be checked for selection.



Examples

is_selected( 'streets', get_feature('streets', 'name', "street_name")) → TRUE if the current building's street is selected (assuming the building layer has a field named 'street_name' and the 'streets' layer has a field called 'name' with unique values).
is_selected( 'streets', get_feature_by_id('streets', 1)) → TRUE if the feature with the id 1 on the "streets" layer is selected.







maptip
Returns the maptip for a given feature in a layer. The expression is evaluated by default. Can be used with zero, one or more arguments, see below for details.
No parameters
If called with no parameters, the function will evaluate the maptip of the current feature in the current layer.






Syntax
maptip()

Examples

maptip() → The maptip of the current feature in the current layer.





One 'feature' parameter
If called with a 'feature' parameter only, the function will evaluate the specified feature from the current layer.






Syntax
maptip(feature)

Arguments

feature - The feature which should be evaluated.



Examples

maptip(@atlas_feature) → The maptip of the current atlas feature.





Layer and feature parameters
If the function is called with both a layer and a feature, it will evaluate the specified feature from the specified layer.






Syntax
maptip(layer, feature, [evaluate=true])
[] marks optional arguments


Arguments

layer - The layer (or its ID or name)
feature - The feature which should be evaluated.
evaluate - If the expression must be evaluated. If false, the expression will be returned as a string literal only (which could potentially be later evaluated using the 'eval_template' function).



Examples

maptip('streets', get_feature_by_id('streets', 1)) → The maptip of the feature with the ID 1 on the layer 'streets'.
maptip('a_layer_id', @feature, 'False') → The maptip of the given feature not evaluated.







num_selected
Returns the number of selected features on a given layer. By default works on the layer on which the expression is evaluated.






Syntax
num_selected([layer=current layer])
[] marks optional arguments


Arguments

layer - The layer (or its id or name) on which the selection will be checked.



Examples

num_selected() → The number of selected features on the current layer.
num_selected('streets') → The number of selected features on the layer streets







represent_attributes
Returns a map with the attribute names as keys and the configured representation values as values. The representation value for the attributes depends on the configured widget type for each attribute.  Can be used with zero, one or more arguments, see below for details.
No parameters
If called with no parameters, the function will return the representation of the attributes of the current feature in the current layer.






Syntax
represent_attributes()

Examples

represent_attributes() → The representation of the attributes for the current feature.





One 'feature' parameter
If called with a 'feature' parameter only, the function will return the representation of the attributes of the specified feature from the current layer.






Syntax
represent_attributes(feature)

Arguments

feature - The feature which should be evaluated.



Examples

represent_attributes(@atlas_feature) → The representation of the attributes for the specified feature from the current layer.





Layer and feature parameters
If called with a 'layer' and a 'feature' parameter, the function will return the representation of the attributes of the specified feature from the specified layer.






Syntax
represent_attributes(layer, feature)

Arguments

layer - The layer (or its ID or name).
feature - The feature which should be evaluated.



Examples

represent_attributes('atlas_layer', @atlas_feature) → The representation of the attributes for the specified feature from the specified layer.







represent_value
Returns the configured representation value for a field value. It depends on the configured widget type. Often, this is useful for 'Value Map' widgets.






Syntax
represent_value(value, [fieldName])
[] marks optional arguments


Arguments

value - The value which should be resolved. Most likely a field.
fieldName - The field name for which the widget configuration should be loaded.



Examples

represent_value("field_with_value_map") → Description for value
represent_value('static value', 'field_name') → Description for static value







sqlite_fetch_and_increment
Manage autoincrementing values in sqlite databases.
SQlite default values can only be applied on insert and not prefetched.
This makes it impossible to acquire an incremented primary key via AUTO_INCREMENT before creating the row in the database. Sidenote: with postgres, this works via the option evaluate default values.
When adding new features with relations, it is really nice to be able to already add children for a parent, while the parents form is still open and hence the parent feature uncommitted.
To get around this limitation, this function can be used to manage sequence values in a separate table on sqlite based formats like gpkg.
The sequence table will be filtered for a sequence id (filter_attribute and filter_value) and the current value of the id_field will be incremented by 1 and the incremented value returned.
If additional columns require values to be specified, the default_values map can be used for this purpose.
Note
This function modifies the target sqlite table. It is intended for usage with default value configurations for attributes.
When the database parameter is a layer and the layer is in transaction mode, the value will only be retrieved once during the lifetime of a transaction and cached and incremented. This makes it unsafe to work on the same database from several processes in parallel.






Syntax
sqlite_fetch_and_increment(database, table, id_field, filter_attribute, filter_value, [default_values])
[] marks optional arguments


Arguments

database - Path to the sqlite file or geopackage layer
table - Name of the table that manages the sequences
id_field - Name of the field that contains the current value
filter_attribute - Name the field that contains a unique identifier for this sequence. Must have a UNIQUE index.
filter_value - Name of the sequence to use.
default_values - Map with default values for additional columns on the table. The values need to be fully quoted. Functions are allowed.



Examples

sqlite_fetch_and_increment(@layer, 'sequence_table', 'last_unique_id', 'sequence_id', 'global', map('last_change', 'date(''now'')', 'user', '''' || @user_account_name || '''')) → 0
sqlite_fetch_and_increment(layer_property(@layer, 'path'), 'sequence_table', 'last_unique_id', 'sequence_id', 'global', map('last_change', 'date(''now'')', 'user', '''' || @user_account_name || '''')) → 0







uuid
Generates a Universally Unique Identifier (UUID) for each row using the Qt QUuid::createUuid method.






Syntax
uuid([format='WithBraces'])
[] marks optional arguments


Arguments

format - The format, as the UUID will be formatted. 'WithBraces', 'WithoutBraces' or 'Id128'.



Examples

uuid() → '{0bd2f60f-f157-4a6d-96af-d4ba4cb366a1}'
uuid('WithoutBraces') → '0bd2f60f-f157-4a6d-96af-d4ba4cb366a1'
uuid('Id128') → '0bd2f60ff1574a6d96afd4ba4cb366a1'







