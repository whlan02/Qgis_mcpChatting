




orphan:




env
Gets an environment variable and returns its content as a string. If the variable is not found, NULL will be returned. This is handy to inject system specific configuration like drive letters or path prefixes. Definition of environment variables depends on the operating system, please check with your system administrator or the operating system documentation how this can be set.






Syntax
env(name)

Arguments

name - The name of the environment variable which should be retrieved.



Examples

env( 'LANG' ) → 'en_US.UTF-8'
env( 'MY_OWN_PREFIX_VAR' ) → 'Z:'
env( 'I_DO_NOT_EXIST' ) → NULL







eval
Evaluates an expression which is passed in a string. Useful to expand dynamic parameters passed as context variables or fields.






Syntax
eval(expression)

Arguments

expression - an expression string



Examples

eval('\'nice\'') → 'nice'
eval(@expression_var) → [whatever the result of evaluating @expression_var might be…]







eval_template
Evaluates a template which is passed in a string. Useful to expand dynamic parameters passed as context variables or fields.






Syntax
eval_template(template)

Arguments

template - a template string



Examples

eval_template('QGIS [% upper(\'rocks\') %]') → QGIS ROCKS







is_layer_visible
Returns TRUE if a specified layer is visible.






Syntax
is_layer_visible(layer)

Arguments

layer - a string, representing either a layer name or layer ID



Examples

is_layer_visible('baseraster') → TRUE







mime_type
Returns the mime type of the binary data.






Syntax
mime_type(bytes)

Arguments

bytes - the binary data



Examples

mime_type('<html><body></body></html>') → text/html
mime_type(from_base64('R0lGODlhAQABAAAAACH5BAEKAAEALAAAAAABAAEAAAIAOw==')) → image/gif







var
Returns the value stored within a specified variable.






Syntax
var(name)

Arguments

name - a variable name



Examples

var('qgis_version') → '2.12'







with_variable
This function sets a variable for any expression code that will be provided as 3rd argument. This is only useful for complicated expressions, where the same calculated value needs to be used in different places.






Syntax
with_variable(name, value, expression)

Arguments

name - the name of the variable to set
value - the value to set
expression - the expression for which the variable will be available



Examples

with_variable('my_sum', 1 + 2 + 3, @my_sum * 2 + @my_sum * 5) → 42







